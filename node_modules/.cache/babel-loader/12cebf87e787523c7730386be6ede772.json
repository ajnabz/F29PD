{"ast":null,"code":"var _jsxFileName = \"/Users/abbieprescott/Documents/GitHub/F29PD/src/components/clockFunction.js\";\nimport React from 'react';\nimport Clock from 'react-clock';\nconst CLOCK_VIEW_MODES = {\n  ANALOG: 'analog',\n  DIGITAL: 'digital'\n};\n\nclass ClockFunction extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewMode: CLOCK_VIEW_MODES.DIGITAL,\n      time: new Date()\n    };\n    this.intervalId = null;\n\n    this.renderAnalog = () => {\n      return React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#2DBBAD',\n          fontSize: '1.3em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, this.state.time.toLocaleTimeString());\n    };\n\n    this.renderDigital = () => {\n      return React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#2DBBAD'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Clock, {\n        value: this.state.time,\n        size: 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }));\n    };\n\n    this.changeViewMode = () => {\n      if (this.state.viewMode === CLOCK_VIEW_MODES.ANALOG) this.setState({\n        viewMode: CLOCK_VIEW_MODES.DIGITAL\n      });\n      if (this.state.viewMode === CLOCK_VIEW_MODES.DIGITAL) this.setState({\n        viewMode: CLOCK_VIEW_MODES.ANALOG\n      });\n    };\n  }\n\n  omponentDidMount() {\n    this.intervalId = setInterval(() => {\n      this.setState({\n        time: new Date()\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      onClick: this.changeViewMode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.state.viewMode === CLOCK_VIEW_MODES.ANALOG && this.renderAnalog(), this.state.viewMode === CLOCK_VIEW_MODES.DIGITAL && this.renderDigital());\n  }\n\n}\n\nexport default ClockFunction;","map":{"version":3,"sources":["/Users/abbieprescott/Documents/GitHub/F29PD/src/components/clockFunction.js"],"names":["React","Clock","CLOCK_VIEW_MODES","ANALOG","DIGITAL","ClockFunction","Component","state","viewMode","time","Date","intervalId","renderAnalog","backgroundColor","fontSize","toLocaleTimeString","renderDigital","changeViewMode","setState","omponentDidMount","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,OAAO,EAAE;AAA7B,CAAzB;;AAEA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AAAEC,MAAAA,QAAQ,EAAEN,gBAAgB,CAACE,OAA7B;AAAsCK,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAA5C,KADgC;AAAA,SAGxCC,UAHwC,GAG3B,IAH2B;;AAAA,SAIxCC,YAJwC,GAIzB,MAAM;AACjB,aACI;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,QAAQ,EAAE;AAAxC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKP,KAAL,CAAWE,IAAX,CAAgBM,kBAAhB,EADL,CADJ;AAKH,KAVuC;;AAAA,SAWxCC,aAXwC,GAWxB,MAAM;AAClB,aACI;AAAK,QAAA,KAAK,EAAE;AAAEH,UAAAA,eAAe,EAAE;AAAnB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWE,IAAzB;AAA+B,QAAA,IAAI,EAAE,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH,KAjBuC;;AAAA,SA8BxCQ,cA9BwC,GA8BvB,MAAM;AACnB,UAAI,KAAKV,KAAL,CAAWC,QAAX,KAAwBN,gBAAgB,CAACC,MAA7C,EAAqD,KAAKe,QAAL,CAAc;AAAEV,QAAAA,QAAQ,EAAEN,gBAAgB,CAACE;AAA7B,OAAd;AACrD,UAAI,KAAKG,KAAL,CAAWC,QAAX,KAAwBN,gBAAgB,CAACE,OAA7C,EAAsD,KAAKc,QAAL,CAAc;AAAEV,QAAAA,QAAQ,EAAEN,gBAAgB,CAACC;AAA7B,OAAd;AACzD,KAjCuC;AAAA;;AAmBxCgB,EAAAA,gBAAgB,GAAG;AACf,SAAKR,UAAL,GAAkBS,WAAW,CAAC,MAAM;AAClC,WAAKF,QAAL,CAAc;AACZT,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AADM,OAAd;AAGD,KAJ4B,EAI1B,IAJ0B,CAA7B;AAKD;;AACDW,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKX,UAAN,CAAb;AACD;;AAOHY,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,OAAO,EAAE,KAAKN,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKV,KAAL,CAAWC,QAAX,KAAwBN,gBAAgB,CAACC,MAAzC,IAAmD,KAAKS,YAAL,EADxD,EAEK,KAAKL,KAAL,CAAWC,QAAX,KAAwBN,gBAAgB,CAACE,OAAzC,IAAoD,KAAKY,aAAL,EAFzD,CADJ;AAMH;;AA1CuC;;AA8C5C,eAAeX,aAAf","sourcesContent":["import React from 'react';\nimport Clock from 'react-clock';\n\nconst CLOCK_VIEW_MODES = { ANALOG: 'analog', DIGITAL: 'digital' };\n\nclass ClockFunction extends React.Component {\n    state = { viewMode: CLOCK_VIEW_MODES.DIGITAL, time: new Date() };\n\n    intervalId = null;\n    renderAnalog = () => {\n        return (\n            <div style={{ backgroundColor: '#2DBBAD', fontSize: '1.3em' }}>\n                {this.state.time.toLocaleTimeString()}\n            </div>\n        );\n    };\n    renderDigital = () => {\n        return (\n            <div style={{ backgroundColor: '#2DBBAD' }}>\n                <Clock value={this.state.time} size={100} />\n            </div>\n        );\n    };\n\n    omponentDidMount() {\n        this.intervalId = setInterval(() => {\n          this.setState({\n            time: new Date()\n          });\n        }, 1000);\n      }\n      componentWillUnmount() {\n        clearInterval(this.intervalId);\n      }\n\n    changeViewMode = () => {\n        if (this.state.viewMode === CLOCK_VIEW_MODES.ANALOG) this.setState({ viewMode: CLOCK_VIEW_MODES.DIGITAL });\n        if (this.state.viewMode === CLOCK_VIEW_MODES.DIGITAL) this.setState({ viewMode: CLOCK_VIEW_MODES.ANALOG });\n    };\n\n    render() {\n        return (\n            <div onClick={this.changeViewMode}>\n                {this.state.viewMode === CLOCK_VIEW_MODES.ANALOG && this.renderAnalog()}\n                {this.state.viewMode === CLOCK_VIEW_MODES.DIGITAL && this.renderDigital()}\n            </div>\n        );\n    }\n\n}\n\nexport default ClockFunction;\n"]},"metadata":{},"sourceType":"module"}