{"ast":null,"code":"var _jsxFileName = \"/Users/abbieprescott/Documents/GitHub/F29PD/src/components/clockFunction.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Clock from 'react-clock';\n\nclass ClockFunction extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      time: new Date(),\n      isAnalogueView: true,\n      isDigitalView: false\n    };\n  }\n\n  componentDidMount() {\n    // create the interval once component is mounted\n    this.update = setInterval(() => {\n      this.setState({\n        time: new Date()\n      });\n    }, 1 * 1000); // every 1 seconds\n  }\n\n  componentWillUnmount() {\n    // delete the interval just before component is removed\n    clearInterval(this.update);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isAnalogueView: !state.isAnalogueView\n    }));\n  }\n\n  render() {\n    function onClick() {\n      var isAnalogueView = false;\n      var isDigitalView = true;\n      var time = new Date();\n\n      if (isAnalogueView === true) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, time.toLocaleTimeString()));\n      } else if (isDigitalView === true) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(Clock, {\n          value: time,\n          size: 100,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, onClick());\n  }\n\n}\n\nexport default ClockFunction;","map":{"version":3,"sources":["/Users/abbieprescott/Documents/GitHub/F29PD/src/components/clockFunction.js"],"names":["React","Component","Clock","ClockFunction","state","time","Date","isAnalogueView","isDigitalView","componentDidMount","update","setInterval","setState","componentWillUnmount","clearInterval","handleClick","render","onClick","toLocaleTimeString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACC,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAExCG,KAFwC,GAEhC;AACJC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,EADF;AAEJC,MAAAA,cAAc,EAAE,IAFZ;AAGJC,MAAAA,aAAa,EAAE;AAHX,KAFgC;AAAA;;AAYxCC,EAAAA,iBAAiB,GAAG;AAAE;AAClB,SAAKC,MAAL,GAAcC,WAAW,CAAC,MAAM;AAC5B,WAAKC,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAR,OAAd;AACH,KAFwB,EAEtB,IAAI,IAFkB,CAAzB,CADgB,CAGF;AACjB;;AAEDO,EAAAA,oBAAoB,GAAG;AAAE;AACrBC,IAAAA,aAAa,CAAC,KAAKJ,MAAN,CAAb;AACH;;AAEDK,EAAAA,WAAW,GAAG;AACV,SAAKH,QAAL,CAAcR,KAAK,KAAK;AACxBG,MAAAA,cAAc,EAAE,CAACH,KAAK,CAACG;AADC,KAAL,CAAnB;AAGH;;AAGDS,EAAAA,MAAM,GAAG;AAGL,aAASC,OAAT,GAAmB;AACf,UAAIV,cAAc,GAAG,KAArB;AACA,UAAIC,aAAa,GAAG,IAApB;AACA,UAAIH,IAAI,GAAG,IAAIC,IAAJ,EAAX;;AAEA,UAAIC,cAAc,KAAK,IAAvB,EAA6B;AACzB,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,IAAI,CAACa,kBAAL,EADL,CADJ,CADJ;AAOH,OARD,MAQO,IAAIV,aAAa,KAAK,IAAtB,EAA4B;AAC/B,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAEH,IAAd;AAAoB,UAAA,IAAI,EAAE,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;AACJ;;AAED,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMY,OAAO,EAAb,CADJ;AAGH;;AAzDuC;;AA4D5C,eAAed,aAAf","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport Clock from 'react-clock';\n\nclass ClockFunction extends React.Component {\n\n    state = {\n        time: new Date(),\n        isAnalogueView: true,\n        isDigitalView: false\n\n    }\n\n\n\n\n    componentDidMount() { // create the interval once component is mounted\n        this.update = setInterval(() => {\n            this.setState({ time: new Date() });\n        }, 1 * 1000); // every 1 seconds\n    }\n\n    componentWillUnmount() { // delete the interval just before component is removed\n        clearInterval(this.update);\n    }\n\n    handleClick() {\n        this.setState(state => ({\n        isAnalogueView: !state.isAnalogueView\n        }));\n    }\n\n\n    render() {\n        \n\n        function onClick() {\n            var isAnalogueView = false;\n            var isDigitalView = true;\n            var time = new Date();\n\n            if (isAnalogueView === true) {\n                return (\n                    <div>\n                        <div>\n                            {time.toLocaleTimeString()}\n                        </div>\n                    </div>\n                );\n            } else if (isDigitalView === true) {\n                return (\n                    <div>\n                        <Clock value={time} size={100}/>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>{onClick()}</div>\n        );\n    }\n}\n\nexport default ClockFunction;\n"]},"metadata":{},"sourceType":"module"}